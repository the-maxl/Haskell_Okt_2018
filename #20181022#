
-- falls x==1 gib 1 zurück, sonst gib 2*x zurück
f x = if (x == 1) then 1 else 2*x

-- Addiere die ersten zwei Elemente einer Liste
gib1plus2 [x,y,z] = x+y
	  -- gib1plus2 [1,2,5] -> 3


 take 5 [1,3..]
[1,3,5,7,9]

hoch2 x = x^2
Prelude> hoch2 3
9

-- Liste summieren: Vorversuch 1:
sumList x = if length x == 2 then head x + last x else 0
Prelude> sumList [4,5]
9
Prelude> sumList [4,5,8]
0



Prelude> fibo 4
3

-- Elemente einer Liste summieren:  LÄNGE 0 UND 1 BERÜCKSICHTIGEN!
sumList x = if length x == 2
  then head x + last x
  else (head x + sumList (tail x))
  
Prelude> sumList [1,2,3]
6
Prelude> sumList [1,2,3,4]
10

-- mit unendlich langer Liste:
sumList (take 4 [1,2..])
10
sumList (take 100 [1,2..])
5050

elem 1000 [1,2..]
True


-- Liste mit Zweierpotenzen erzeugen:
zp x = if x == 0 then [1]  else (2^x : zp (x-1))
Prelude> zp 4
[16,8,4,2,1]

-- anders herum:
zp x = if x == 0 then [1]  else (zp (x-1) ++ [2^x])
Prelude> zp 8
[1,2,4,8,16,32,64,128,256]

-- Zweierpotenzen aus Liste erzeugen
zp x = if length x == 1 then [2^(head x)] else 2^(head x) : zp (tail x)
Prelude> zp [3,4,8]
[8,16,256]

-- Liste mit unendlich vielen Zweierpotenzen (geschummelt)
zp (take 10 ([0,1..]))
[1,2,4,8,16,32,64,128,256,512]

-- ist x eine zweierpotenz?
elem 4 (zp [0..8])
True

elem 4 (zp [0,1..])
^CInterrupted.

-- zp muss überarbeitet werden


-- 20181022

-- Listen addieren  -- addList x y = if min (length x) (length y) >= 1 then ([head x + head y]) else [0]


-- Liste sortieren
